# flow-out and flow-in channels are automatically registered in the classpath as long as `quarkus-messaging`
# is included in the classpath and this property is set to true.
# Alternatively, you may implement your own EventConsumer and EventProducer interfaces from the CNCF Java SDK
# to customize your channel creation and messaging handling.
quarkus.flow.messaging.defaults-enabled=true
# optionally, you may enable lifecycle events from the engine.
# see: https://github.com/serverlessworkflow/specification/blob/main/dsl-reference.md#lifecycle-events
quarkus.flow.messaging.lifecycle-enabled=true

# Configure channels (connector, topic/queue, codecs)
mp.messaging.incoming.flow-in.connector=smallrye-kafka
mp.messaging.incoming.flow-in.topic=flow-in
mp.messaging.incoming.flow-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.flow-in.value.deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer

mp.messaging.outgoing.flow-out.connector=smallrye-kafka
mp.messaging.outgoing.flow-out.topic=flow-out
mp.messaging.outgoing.flow-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.flow-out.value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer

# Specific configuration for lifecycle
mp.messaging.outgoing.flow-lifecycle-out.connector=smallrye-kafka
mp.messaging.outgoing.flow-lifecycle-out.topic=flow-lifecycle-out
mp.messaging.outgoing.flow-lifecycle-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.flow-lifecycle-out.value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer

# This way you see all the events being consumed or produced.
quarkus.log.category."io.quarkiverse.flow".level=DEBUG